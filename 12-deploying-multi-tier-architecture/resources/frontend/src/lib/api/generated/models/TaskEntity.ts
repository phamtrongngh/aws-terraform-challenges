/* tslint:disable */
/* eslint-disable */
/**
 * Task Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserEntity } from './UserEntity';
import {
    UserEntityFromJSON,
    UserEntityFromJSONTyped,
    UserEntityToJSON,
    UserEntityToJSONTyped,
} from './UserEntity';

/**
 * 
 * @export
 * @interface TaskEntity
 */
export interface TaskEntity {
    /**
     * 
     * @type {number}
     * @memberof TaskEntity
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof TaskEntity
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof TaskEntity
     */
    description?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TaskEntity
     */
    completed: boolean;
    /**
     * 
     * @type {Date}
     * @memberof TaskEntity
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TaskEntity
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof TaskEntity
     */
    userId: string;
    /**
     * 
     * @type {UserEntity}
     * @memberof TaskEntity
     */
    user: UserEntity;
}

/**
 * Check if a given object implements the TaskEntity interface.
 */
export function instanceOfTaskEntity(value: object): value is TaskEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('completed' in value) || value['completed'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function TaskEntityFromJSON(json: any): TaskEntity {
    return TaskEntityFromJSONTyped(json, false);
}

export function TaskEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'completed': json['completed'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'userId': json['userId'],
        'user': UserEntityFromJSON(json['user']),
    };
}

export function TaskEntityToJSON(json: any): TaskEntity {
    return TaskEntityToJSONTyped(json, false);
}

export function TaskEntityToJSONTyped(value?: TaskEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'description': value['description'],
        'completed': value['completed'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'userId': value['userId'],
        'user': UserEntityToJSON(value['user']),
    };
}

