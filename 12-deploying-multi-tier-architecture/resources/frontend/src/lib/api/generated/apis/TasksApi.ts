/* tslint:disable */
/* eslint-disable */
/**
 * Task Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTaskDto,
  TaskEntity,
  UpdateTaskDto,
} from '../models/index';
import {
    CreateTaskDtoFromJSON,
    CreateTaskDtoToJSON,
    TaskEntityFromJSON,
    TaskEntityToJSON,
    UpdateTaskDtoFromJSON,
    UpdateTaskDtoToJSON,
} from '../models/index';

export interface TasksControllerCreateTaskRequest {
    createTaskDto: CreateTaskDto;
}

export interface TasksControllerDeleteTaskRequest {
    id: number;
}

export interface TasksControllerFindTaskByIdRequest {
    id: number;
}

export interface TasksControllerUpdateTaskRequest {
    id: number;
    updateTaskDto: UpdateTaskDto;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     */
    async tasksControllerCreateTaskRaw(requestParameters: TasksControllerCreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskEntity>> {
        if (requestParameters['createTaskDto'] == null) {
            throw new runtime.RequiredError(
                'createTaskDto',
                'Required parameter "createTaskDto" was null or undefined when calling tasksControllerCreateTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskDtoToJSON(requestParameters['createTaskDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskEntityFromJSON(jsonValue));
    }

    /**
     */
    async tasksControllerCreateTask(requestParameters: TasksControllerCreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskEntity> {
        const response = await this.tasksControllerCreateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tasksControllerDeleteTaskRaw(requestParameters: TasksControllerDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tasksControllerDeleteTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskEntityFromJSON(jsonValue));
    }

    /**
     */
    async tasksControllerDeleteTask(requestParameters: TasksControllerDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskEntity> {
        const response = await this.tasksControllerDeleteTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tasksControllerFindAllTasksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskEntityFromJSON));
    }

    /**
     */
    async tasksControllerFindAllTasks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskEntity>> {
        const response = await this.tasksControllerFindAllTasksRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tasksControllerFindTaskByIdRaw(requestParameters: TasksControllerFindTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tasksControllerFindTaskById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskEntityFromJSON(jsonValue));
    }

    /**
     */
    async tasksControllerFindTaskById(requestParameters: TasksControllerFindTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskEntity> {
        const response = await this.tasksControllerFindTaskByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tasksControllerUpdateTaskRaw(requestParameters: TasksControllerUpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tasksControllerUpdateTask().'
            );
        }

        if (requestParameters['updateTaskDto'] == null) {
            throw new runtime.RequiredError(
                'updateTaskDto',
                'Required parameter "updateTaskDto" was null or undefined when calling tasksControllerUpdateTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTaskDtoToJSON(requestParameters['updateTaskDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskEntityFromJSON(jsonValue));
    }

    /**
     */
    async tasksControllerUpdateTask(requestParameters: TasksControllerUpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskEntity> {
        const response = await this.tasksControllerUpdateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
